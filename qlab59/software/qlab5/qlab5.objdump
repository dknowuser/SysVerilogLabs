
qlab5.elf:     file format elf32-littlenios2
qlab5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000009b8 memsz 0x000009b8 flags r-x
    LOAD off    0x000019d8 vaddr 0x000029d8 paddr 0x00002fa0 align 2**12
         filesz 0x000005c8 memsz 0x000005c8 flags rw-
    LOAD off    0x00002568 vaddr 0x00003568 paddr 0x00003568 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000009a8  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  000029c8  000029c8  000019c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000005c8  000029d8  00002fa0  000019d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000001a0  00003568  00003568  00002568  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000268  00000000  00000000  00001fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000387  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000494e  00000000  00000000  000025b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f94  00000000  00000000  00006f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000281c  00000000  00000000  00007e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000003d0  00000000  00000000  0000a6b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000889  00000000  00000000  0000aa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006c6  00000000  00000000  0000b311  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000b9d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  0000b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000cb93  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0000cb96  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000cb9b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000cb9c  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  0000cb9d  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0000cba1  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0000cba5  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  0000cba9  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001b  00000000  00000000  0000cbb2  2**0
                  CONTENTS, READONLY
 25 .jdi          0000014e  00000000  00000000  0000cbcd  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0001d7b0  00000000  00000000  0000cd1b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
000029c8 l    d  .rodata	00000000 .rodata
000029d8 l    d  .rwdata	00000000 .rwdata
00003568 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.cpp
00000000 l    df *ABS*	00000000 alt_load.c
000021c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
000023d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002450 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00002b80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002778 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002964 l     F .text	00000040 alt_sim_halt
00002234 g     F .text	00000050 alt_main
00002fa0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00003574 g     O .bss	00000004 errno
0000356c g     O .bss	00000004 alt_argv
0000af80 g       *ABS*	00000000 _gp
00002a00 g     O .rwdata	00000180 alt_fd_list
000029c8 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002f90 g     O .rwdata	00000004 alt_max_fd
00002f9c g     O .rwdata	00000004 _global_impure_ptr
00003708 g       *ABS*	00000000 __bss_end
000029d8 g     O .rwdata	00000028 alt_dev_null
000020f0 g     F .text	00000058 _Z8alt_mainv
00002434 g     F .text	0000001c alt_dcache_flush_all
00002fa0 g       *ABS*	00000000 __ram_rwdata_end
00002f88 g     O .rwdata	00000008 alt_dev_list
000029d8 g       *ABS*	00000000 __ram_rodata_end
00003708 g       *ABS*	00000000 end
000029c4 g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
0000205c g     F .text	0000003c _Z16divide_cpu_clockv
0000277c g     F .text	000001b0 __call_exitprocs
00002020 g     F .text	0000003c _start
000022b8 g     F .text	0000001c alt_sys_init
00002644 g     F .text	00000134 __register_exitproc
0000292c g     F .text	00000038 __mulsi3
000029d8 g       *ABS*	00000000 __ram_rwdata_start
000029c8 g       *ABS*	00000000 __ram_rodata_start
00003708 g       *ABS*	00000000 __alt_stack_base
00003568 g       *ABS*	00000000 __bss_start
00002098 g     F .text	00000058 main
00003570 g     O .bss	00000004 alt_envp
00003578 g     O .bss	00000190 _atexit0
00002f94 g     O .rwdata	00000004 alt_errno
000029c8 g       *ABS*	00000000 __CTOR_END__
000029c8 g       *ABS*	00000000 __flash_rodata_start
000029c8 g       *ABS*	00000000 __DTOR_LIST__
00002284 g     F .text	00000034 alt_irq_init
00002560 g     F .text	00000078 alt_release_fd
000025f8 g     F .text	00000014 atexit
00002f98 g     O .rwdata	00000004 _impure_ptr
00003568 g     O .bss	00000004 alt_argc
000024e0 g     F .text	00000064 _do_dtors
00002f80 g     O .rwdata	00000008 alt_fs_list
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002fa0 g       *ABS*	00000000 _edata
00003708 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000025d8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000260c g     F .text	00000038 exit
00004000 g       *ABS*	00000000 __alt_data_end
000029a4 g     F .text	00000020 _exit
00002544 g     F .text	0000001c alt_icache_flush_all
0000247c g     F .text	00000064 _do_ctors
000022d4 g     F .text	00000100 close
00002148 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6abe014 	ori	gp,gp,44928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108d5a14 	ori	r2,r2,13672

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18cdc214 	ori	r3,r3,14088

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00021480 	call	2148 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00022340 	call	2234 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <_Z16divide_cpu_clockv>:

#define MAX_DATA_VALUE	255
#define CPU_DIV_COEFF	4000
#define BIT_COUNT		8

void divide_cpu_clock(void)
    205c:	defffe04 	addi	sp,sp,-8
    2060:	df000115 	stw	fp,4(sp)
    2064:	df000104 	addi	fp,sp,4
{
	alt_u16 i;
	for(i = 0; i < CPU_DIV_COEFF; i++);
    2068:	e03fff0d 	sth	zero,-4(fp)
    206c:	00000306 	br	207c <_Z16divide_cpu_clockv+0x20>
    2070:	e0bfff0b 	ldhu	r2,-4(fp)
    2074:	10800044 	addi	r2,r2,1
    2078:	e0bfff0d 	sth	r2,-4(fp)
    207c:	e0bfff0b 	ldhu	r2,-4(fp)
    2080:	1083e830 	cmpltui	r2,r2,4000
    2084:	103ffa1e 	bne	r2,zero,2070 <_Z16divide_cpu_clockv+0x14>
};
    2088:	e037883a 	mov	sp,fp
    208c:	df000017 	ldw	fp,0(sp)
    2090:	dec00104 	addi	sp,sp,4
    2094:	f800283a 	ret

00002098 <main>:
	        leds = ((leds<<1) & 0xE) | (!(leds>>3) & 0x1);
	    }
	    return 0;
}

int main(void)
    2098:	defffd04 	addi	sp,sp,-12
    209c:	df000215 	stw	fp,8(sp)
    20a0:	df000204 	addi	fp,sp,8
{
	char leds = 0x1;
    20a4:	00800044 	movi	r2,1
    20a8:	e0bfff05 	stb	r2,-4(fp)
	    int i = 0;
    20ac:	e03ffe15 	stw	zero,-8(fp)
	    while(1)
	    {
	        IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, leds);
    20b0:	e0ffff07 	ldb	r3,-4(fp)
    20b4:	00900004 	movi	r2,16384
    20b8:	10c00035 	stwio	r3,0(r2)
	        //for (i=0; i<(ALT_CPU_CPU_FREQ/500); i++);    // Delay
	        // Johnson code counter on leds
	        leds = ((leds<<1) & 0xE) | (!(leds>>3) & 0x1);
    20bc:	e0bfff07 	ldb	r2,-4(fp)
    20c0:	1085883a 	add	r2,r2,r2
    20c4:	1080038c 	andi	r2,r2,14
    20c8:	1007883a 	mov	r3,r2
    20cc:	e0bfff07 	ldb	r2,-4(fp)
    20d0:	1005d0fa 	srai	r2,r2,3
    20d4:	10803fcc 	andi	r2,r2,255
    20d8:	1080201c 	xori	r2,r2,128
    20dc:	10bfe004 	addi	r2,r2,-128
    20e0:	1005003a 	cmpeq	r2,r2,zero
    20e4:	1884b03a 	or	r2,r3,r2
    20e8:	e0bfff05 	stb	r2,-4(fp)

int main(void)
{
	char leds = 0x1;
	    int i = 0;
	    while(1)
    20ec:	003ff006 	br	20b0 <main+0x18>

000020f0 <_Z8alt_mainv>:
	alt_u16 i;
	for(i = 0; i < CPU_DIV_COEFF; i++);
};

//int main(void) __attribute__((weak, alias("alt_main")));
int alt_main(void)
    20f0:	defffd04 	addi	sp,sp,-12
    20f4:	df000215 	stw	fp,8(sp)
    20f8:	df000204 	addi	fp,sp,8
			divide_cpu_clock();
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
			divide_cpu_clock();
		};
	return 0;*/
	char leds = 0x1;
    20fc:	00800044 	movi	r2,1
    2100:	e0bfff05 	stb	r2,-4(fp)
	    int i = 0;
    2104:	e03ffe15 	stw	zero,-8(fp)
	    while(1)
	    {
	        IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, leds);
    2108:	e0ffff07 	ldb	r3,-4(fp)
    210c:	00900004 	movi	r2,16384
    2110:	10c00035 	stwio	r3,0(r2)
	        //for (i=0; i<(ALT_CPU_CPU_FREQ/500); i++);    // Delay
	        // Johnson code counter on leds
	        leds = ((leds<<1) & 0xE) | (!(leds>>3) & 0x1);
    2114:	e0bfff07 	ldb	r2,-4(fp)
    2118:	1085883a 	add	r2,r2,r2
    211c:	1080038c 	andi	r2,r2,14
    2120:	1007883a 	mov	r3,r2
    2124:	e0bfff07 	ldb	r2,-4(fp)
    2128:	1005d0fa 	srai	r2,r2,3
    212c:	10803fcc 	andi	r2,r2,255
    2130:	1080201c 	xori	r2,r2,128
    2134:	10bfe004 	addi	r2,r2,-128
    2138:	1005003a 	cmpeq	r2,r2,zero
    213c:	1884b03a 	or	r2,r3,r2
    2140:	e0bfff05 	stb	r2,-4(fp)
			divide_cpu_clock();
		};
	return 0;*/
	char leds = 0x1;
	    int i = 0;
	    while(1)
    2144:	003ff006 	br	2108 <_Z8alt_mainv+0x18>

00002148 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2148:	defffe04 	addi	sp,sp,-8
    214c:	dfc00115 	stw	ra,4(sp)
    2150:	df000015 	stw	fp,0(sp)
    2154:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2158:	01000034 	movhi	r4,0
    215c:	210be804 	addi	r4,r4,12192
    2160:	01400034 	movhi	r5,0
    2164:	294a7604 	addi	r5,r5,10712
    2168:	01800034 	movhi	r6,0
    216c:	318be804 	addi	r6,r6,12192
    2170:	00021c80 	call	21c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2174:	01000034 	movhi	r4,0
    2178:	21080804 	addi	r4,r4,8224
    217c:	01400034 	movhi	r5,0
    2180:	29480804 	addi	r5,r5,8224
    2184:	01800034 	movhi	r6,0
    2188:	31880804 	addi	r6,r6,8224
    218c:	00021c80 	call	21c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2190:	01000034 	movhi	r4,0
    2194:	210a7204 	addi	r4,r4,10696
    2198:	01400034 	movhi	r5,0
    219c:	294a7204 	addi	r5,r5,10696
    21a0:	01800034 	movhi	r6,0
    21a4:	318a7604 	addi	r6,r6,10712
    21a8:	00021c80 	call	21c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    21ac:	00024340 	call	2434 <alt_dcache_flush_all>
  alt_icache_flush_all();
    21b0:	00025440 	call	2544 <alt_icache_flush_all>
}
    21b4:	e037883a 	mov	sp,fp
    21b8:	dfc00117 	ldw	ra,4(sp)
    21bc:	df000017 	ldw	fp,0(sp)
    21c0:	dec00204 	addi	sp,sp,8
    21c4:	f800283a 	ret

000021c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    21c8:	defffc04 	addi	sp,sp,-16
    21cc:	df000315 	stw	fp,12(sp)
    21d0:	df000304 	addi	fp,sp,12
    21d4:	e13ffd15 	stw	r4,-12(fp)
    21d8:	e17ffe15 	stw	r5,-8(fp)
    21dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    21e0:	e0fffe17 	ldw	r3,-8(fp)
    21e4:	e0bffd17 	ldw	r2,-12(fp)
    21e8:	18800e26 	beq	r3,r2,2224 <alt_load_section+0x5c>
  {
    while( to != end )
    21ec:	00000a06 	br	2218 <alt_load_section+0x50>
    {
      *to++ = *from++;
    21f0:	e0bffd17 	ldw	r2,-12(fp)
    21f4:	10c00017 	ldw	r3,0(r2)
    21f8:	e0bffe17 	ldw	r2,-8(fp)
    21fc:	10c00015 	stw	r3,0(r2)
    2200:	e0bffe17 	ldw	r2,-8(fp)
    2204:	10800104 	addi	r2,r2,4
    2208:	e0bffe15 	stw	r2,-8(fp)
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	10800104 	addi	r2,r2,4
    2214:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2218:	e0fffe17 	ldw	r3,-8(fp)
    221c:	e0bfff17 	ldw	r2,-4(fp)
    2220:	18bff31e 	bne	r3,r2,21f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    2224:	e037883a 	mov	sp,fp
    2228:	df000017 	ldw	fp,0(sp)
    222c:	dec00104 	addi	sp,sp,4
    2230:	f800283a 	ret

00002234 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2234:	defffd04 	addi	sp,sp,-12
    2238:	dfc00215 	stw	ra,8(sp)
    223c:	df000115 	stw	fp,4(sp)
    2240:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2244:	0009883a 	mov	r4,zero
    2248:	00022840 	call	2284 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    224c:	00022b80 	call	22b8 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    2250:	000247c0 	call	247c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    2254:	01000034 	movhi	r4,0
    2258:	21093804 	addi	r4,r4,9440
    225c:	00025f80 	call	25f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    2260:	d1217a17 	ldw	r4,-31256(gp)
    2264:	d1617b17 	ldw	r5,-31252(gp)
    2268:	d1a17c17 	ldw	r6,-31248(gp)
    226c:	00020980 	call	2098 <main>
    2270:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    2274:	01000044 	movi	r4,1
    2278:	00022d40 	call	22d4 <close>
  exit (result);
    227c:	e13fff17 	ldw	r4,-4(fp)
    2280:	000260c0 	call	260c <exit>

00002284 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2284:	defffd04 	addi	sp,sp,-12
    2288:	dfc00215 	stw	ra,8(sp)
    228c:	df000115 	stw	fp,4(sp)
    2290:	df000104 	addi	fp,sp,4
    2294:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    2298:	00025d80 	call	25d8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    229c:	00800044 	movi	r2,1
    22a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    22a4:	e037883a 	mov	sp,fp
    22a8:	dfc00117 	ldw	ra,4(sp)
    22ac:	df000017 	ldw	fp,0(sp)
    22b0:	dec00204 	addi	sp,sp,8
    22b4:	f800283a 	ret

000022b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    22b8:	deffff04 	addi	sp,sp,-4
    22bc:	df000015 	stw	fp,0(sp)
    22c0:	d839883a 	mov	fp,sp
}
    22c4:	e037883a 	mov	sp,fp
    22c8:	df000017 	ldw	fp,0(sp)
    22cc:	dec00104 	addi	sp,sp,4
    22d0:	f800283a 	ret

000022d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    22d4:	defff804 	addi	sp,sp,-32
    22d8:	dfc00715 	stw	ra,28(sp)
    22dc:	df000615 	stw	fp,24(sp)
    22e0:	df000604 	addi	fp,sp,24
    22e4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    22e8:	e0bffc17 	ldw	r2,-16(fp)
    22ec:	1004803a 	cmplt	r2,r2,zero
    22f0:	1000091e 	bne	r2,zero,2318 <close+0x44>
    22f4:	e13ffc17 	ldw	r4,-16(fp)
    22f8:	01400304 	movi	r5,12
    22fc:	000292c0 	call	292c <__mulsi3>
    2300:	1007883a 	mov	r3,r2
    2304:	00800034 	movhi	r2,0
    2308:	108a8004 	addi	r2,r2,10752
    230c:	1887883a 	add	r3,r3,r2
    2310:	e0ffff15 	stw	r3,-4(fp)
    2314:	00000106 	br	231c <close+0x48>
    2318:	e03fff15 	stw	zero,-4(fp)
    231c:	e0bfff17 	ldw	r2,-4(fp)
    2320:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2324:	e0bffb17 	ldw	r2,-20(fp)
    2328:	1005003a 	cmpeq	r2,r2,zero
    232c:	10001d1e 	bne	r2,zero,23a4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2330:	e0bffb17 	ldw	r2,-20(fp)
    2334:	10800017 	ldw	r2,0(r2)
    2338:	10800417 	ldw	r2,16(r2)
    233c:	1005003a 	cmpeq	r2,r2,zero
    2340:	1000071e 	bne	r2,zero,2360 <close+0x8c>
    2344:	e0bffb17 	ldw	r2,-20(fp)
    2348:	10800017 	ldw	r2,0(r2)
    234c:	10800417 	ldw	r2,16(r2)
    2350:	e13ffb17 	ldw	r4,-20(fp)
    2354:	103ee83a 	callr	r2
    2358:	e0bffe15 	stw	r2,-8(fp)
    235c:	00000106 	br	2364 <close+0x90>
    2360:	e03ffe15 	stw	zero,-8(fp)
    2364:	e0bffe17 	ldw	r2,-8(fp)
    2368:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    236c:	e13ffc17 	ldw	r4,-16(fp)
    2370:	00025600 	call	2560 <alt_release_fd>
    if (rval < 0)
    2374:	e0bffa17 	ldw	r2,-24(fp)
    2378:	1004403a 	cmpge	r2,r2,zero
    237c:	1000071e 	bne	r2,zero,239c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2380:	00023d40 	call	23d4 <alt_get_errno>
    2384:	e0fffa17 	ldw	r3,-24(fp)
    2388:	00c7c83a 	sub	r3,zero,r3
    238c:	10c00015 	stw	r3,0(r2)
      return -1;
    2390:	00bfffc4 	movi	r2,-1
    2394:	e0bffd15 	stw	r2,-12(fp)
    2398:	00000806 	br	23bc <close+0xe8>
    }
    return 0;
    239c:	e03ffd15 	stw	zero,-12(fp)
    23a0:	00000606 	br	23bc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    23a4:	00023d40 	call	23d4 <alt_get_errno>
    23a8:	1007883a 	mov	r3,r2
    23ac:	00801444 	movi	r2,81
    23b0:	18800015 	stw	r2,0(r3)
    return -1;
    23b4:	00bfffc4 	movi	r2,-1
    23b8:	e0bffd15 	stw	r2,-12(fp)
    23bc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    23c0:	e037883a 	mov	sp,fp
    23c4:	dfc00117 	ldw	ra,4(sp)
    23c8:	df000017 	ldw	fp,0(sp)
    23cc:	dec00204 	addi	sp,sp,8
    23d0:	f800283a 	ret

000023d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    23d4:	defffd04 	addi	sp,sp,-12
    23d8:	dfc00215 	stw	ra,8(sp)
    23dc:	df000115 	stw	fp,4(sp)
    23e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    23e4:	00800034 	movhi	r2,0
    23e8:	108be504 	addi	r2,r2,12180
    23ec:	10800017 	ldw	r2,0(r2)
    23f0:	1005003a 	cmpeq	r2,r2,zero
    23f4:	1000061e 	bne	r2,zero,2410 <alt_get_errno+0x3c>
    23f8:	00800034 	movhi	r2,0
    23fc:	108be504 	addi	r2,r2,12180
    2400:	10800017 	ldw	r2,0(r2)
    2404:	103ee83a 	callr	r2
    2408:	e0bfff15 	stw	r2,-4(fp)
    240c:	00000306 	br	241c <alt_get_errno+0x48>
    2410:	00800034 	movhi	r2,0
    2414:	108d5d04 	addi	r2,r2,13684
    2418:	e0bfff15 	stw	r2,-4(fp)
    241c:	e0bfff17 	ldw	r2,-4(fp)
}
    2420:	e037883a 	mov	sp,fp
    2424:	dfc00117 	ldw	ra,4(sp)
    2428:	df000017 	ldw	fp,0(sp)
    242c:	dec00204 	addi	sp,sp,8
    2430:	f800283a 	ret

00002434 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2434:	deffff04 	addi	sp,sp,-4
    2438:	df000015 	stw	fp,0(sp)
    243c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2440:	e037883a 	mov	sp,fp
    2444:	df000017 	ldw	fp,0(sp)
    2448:	dec00104 	addi	sp,sp,4
    244c:	f800283a 	ret

00002450 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2450:	defffc04 	addi	sp,sp,-16
    2454:	df000315 	stw	fp,12(sp)
    2458:	df000304 	addi	fp,sp,12
    245c:	e13ffd15 	stw	r4,-12(fp)
    2460:	e17ffe15 	stw	r5,-8(fp)
    2464:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2468:	e0bfff17 	ldw	r2,-4(fp)
}
    246c:	e037883a 	mov	sp,fp
    2470:	df000017 	ldw	fp,0(sp)
    2474:	dec00104 	addi	sp,sp,4
    2478:	f800283a 	ret

0000247c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    247c:	defffd04 	addi	sp,sp,-12
    2480:	dfc00215 	stw	ra,8(sp)
    2484:	df000115 	stw	fp,4(sp)
    2488:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    248c:	00bfff04 	movi	r2,-4
    2490:	00c00034 	movhi	r3,0
    2494:	18ca7204 	addi	r3,r3,10696
    2498:	1885883a 	add	r2,r3,r2
    249c:	e0bfff15 	stw	r2,-4(fp)
    24a0:	00000606 	br	24bc <_do_ctors+0x40>
        (*ctor) (); 
    24a4:	e0bfff17 	ldw	r2,-4(fp)
    24a8:	10800017 	ldw	r2,0(r2)
    24ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    24b0:	e0bfff17 	ldw	r2,-4(fp)
    24b4:	10bfff04 	addi	r2,r2,-4
    24b8:	e0bfff15 	stw	r2,-4(fp)
    24bc:	e0ffff17 	ldw	r3,-4(fp)
    24c0:	00800034 	movhi	r2,0
    24c4:	108a7104 	addi	r2,r2,10692
    24c8:	18bff62e 	bgeu	r3,r2,24a4 <_do_ctors+0x28>
        (*ctor) (); 
}
    24cc:	e037883a 	mov	sp,fp
    24d0:	dfc00117 	ldw	ra,4(sp)
    24d4:	df000017 	ldw	fp,0(sp)
    24d8:	dec00204 	addi	sp,sp,8
    24dc:	f800283a 	ret

000024e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    24e0:	defffd04 	addi	sp,sp,-12
    24e4:	dfc00215 	stw	ra,8(sp)
    24e8:	df000115 	stw	fp,4(sp)
    24ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    24f0:	00bfff04 	movi	r2,-4
    24f4:	00c00034 	movhi	r3,0
    24f8:	18ca7204 	addi	r3,r3,10696
    24fc:	1885883a 	add	r2,r3,r2
    2500:	e0bfff15 	stw	r2,-4(fp)
    2504:	00000606 	br	2520 <_do_dtors+0x40>
        (*dtor) (); 
    2508:	e0bfff17 	ldw	r2,-4(fp)
    250c:	10800017 	ldw	r2,0(r2)
    2510:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2514:	e0bfff17 	ldw	r2,-4(fp)
    2518:	10bfff04 	addi	r2,r2,-4
    251c:	e0bfff15 	stw	r2,-4(fp)
    2520:	e0ffff17 	ldw	r3,-4(fp)
    2524:	00800034 	movhi	r2,0
    2528:	108a7204 	addi	r2,r2,10696
    252c:	18bff62e 	bgeu	r3,r2,2508 <_do_dtors+0x28>
        (*dtor) (); 
}
    2530:	e037883a 	mov	sp,fp
    2534:	dfc00117 	ldw	ra,4(sp)
    2538:	df000017 	ldw	fp,0(sp)
    253c:	dec00204 	addi	sp,sp,8
    2540:	f800283a 	ret

00002544 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2544:	deffff04 	addi	sp,sp,-4
    2548:	df000015 	stw	fp,0(sp)
    254c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2550:	e037883a 	mov	sp,fp
    2554:	df000017 	ldw	fp,0(sp)
    2558:	dec00104 	addi	sp,sp,4
    255c:	f800283a 	ret

00002560 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2560:	defffc04 	addi	sp,sp,-16
    2564:	dfc00315 	stw	ra,12(sp)
    2568:	df000215 	stw	fp,8(sp)
    256c:	dc000115 	stw	r16,4(sp)
    2570:	df000104 	addi	fp,sp,4
    2574:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2578:	e0bfff17 	ldw	r2,-4(fp)
    257c:	108000d0 	cmplti	r2,r2,3
    2580:	10000f1e 	bne	r2,zero,25c0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    2584:	e13fff17 	ldw	r4,-4(fp)
    2588:	04000034 	movhi	r16,0
    258c:	840a8004 	addi	r16,r16,10752
    2590:	01400304 	movi	r5,12
    2594:	000292c0 	call	292c <__mulsi3>
    2598:	1405883a 	add	r2,r2,r16
    259c:	10800204 	addi	r2,r2,8
    25a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    25a4:	e13fff17 	ldw	r4,-4(fp)
    25a8:	04000034 	movhi	r16,0
    25ac:	840a8004 	addi	r16,r16,10752
    25b0:	01400304 	movi	r5,12
    25b4:	000292c0 	call	292c <__mulsi3>
    25b8:	1405883a 	add	r2,r2,r16
    25bc:	10000015 	stw	zero,0(r2)
  }
}
    25c0:	e037883a 	mov	sp,fp
    25c4:	dfc00217 	ldw	ra,8(sp)
    25c8:	df000117 	ldw	fp,4(sp)
    25cc:	dc000017 	ldw	r16,0(sp)
    25d0:	dec00304 	addi	sp,sp,12
    25d4:	f800283a 	ret

000025d8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    25d8:	deffff04 	addi	sp,sp,-4
    25dc:	df000015 	stw	fp,0(sp)
    25e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    25e4:	000170fa 	wrctl	ienable,zero
}
    25e8:	e037883a 	mov	sp,fp
    25ec:	df000017 	ldw	fp,0(sp)
    25f0:	dec00104 	addi	sp,sp,4
    25f4:	f800283a 	ret

000025f8 <atexit>:
    25f8:	200b883a 	mov	r5,r4
    25fc:	000d883a 	mov	r6,zero
    2600:	0009883a 	mov	r4,zero
    2604:	000f883a 	mov	r7,zero
    2608:	00026441 	jmpi	2644 <__register_exitproc>

0000260c <exit>:
    260c:	defffe04 	addi	sp,sp,-8
    2610:	000b883a 	mov	r5,zero
    2614:	dc000015 	stw	r16,0(sp)
    2618:	dfc00115 	stw	ra,4(sp)
    261c:	2021883a 	mov	r16,r4
    2620:	000277c0 	call	277c <__call_exitprocs>
    2624:	00800034 	movhi	r2,0
    2628:	108be704 	addi	r2,r2,12188
    262c:	11000017 	ldw	r4,0(r2)
    2630:	20800f17 	ldw	r2,60(r4)
    2634:	10000126 	beq	r2,zero,263c <exit+0x30>
    2638:	103ee83a 	callr	r2
    263c:	8009883a 	mov	r4,r16
    2640:	00029a40 	call	29a4 <_exit>

00002644 <__register_exitproc>:
    2644:	defffa04 	addi	sp,sp,-24
    2648:	00800034 	movhi	r2,0
    264c:	108be704 	addi	r2,r2,12188
    2650:	dc000015 	stw	r16,0(sp)
    2654:	14000017 	ldw	r16,0(r2)
    2658:	dd000415 	stw	r20,16(sp)
    265c:	2829883a 	mov	r20,r5
    2660:	81405217 	ldw	r5,328(r16)
    2664:	dcc00315 	stw	r19,12(sp)
    2668:	dc800215 	stw	r18,8(sp)
    266c:	dc400115 	stw	r17,4(sp)
    2670:	dfc00515 	stw	ra,20(sp)
    2674:	2023883a 	mov	r17,r4
    2678:	3027883a 	mov	r19,r6
    267c:	3825883a 	mov	r18,r7
    2680:	28002526 	beq	r5,zero,2718 <__register_exitproc+0xd4>
    2684:	29000117 	ldw	r4,4(r5)
    2688:	008007c4 	movi	r2,31
    268c:	11002716 	blt	r2,r4,272c <__register_exitproc+0xe8>
    2690:	8800101e 	bne	r17,zero,26d4 <__register_exitproc+0x90>
    2694:	2105883a 	add	r2,r4,r4
    2698:	1085883a 	add	r2,r2,r2
    269c:	20c00044 	addi	r3,r4,1
    26a0:	1145883a 	add	r2,r2,r5
    26a4:	0009883a 	mov	r4,zero
    26a8:	15000215 	stw	r20,8(r2)
    26ac:	28c00115 	stw	r3,4(r5)
    26b0:	2005883a 	mov	r2,r4
    26b4:	dfc00517 	ldw	ra,20(sp)
    26b8:	dd000417 	ldw	r20,16(sp)
    26bc:	dcc00317 	ldw	r19,12(sp)
    26c0:	dc800217 	ldw	r18,8(sp)
    26c4:	dc400117 	ldw	r17,4(sp)
    26c8:	dc000017 	ldw	r16,0(sp)
    26cc:	dec00604 	addi	sp,sp,24
    26d0:	f800283a 	ret
    26d4:	29802204 	addi	r6,r5,136
    26d8:	00800044 	movi	r2,1
    26dc:	110e983a 	sll	r7,r2,r4
    26e0:	30c04017 	ldw	r3,256(r6)
    26e4:	2105883a 	add	r2,r4,r4
    26e8:	1085883a 	add	r2,r2,r2
    26ec:	1185883a 	add	r2,r2,r6
    26f0:	19c6b03a 	or	r3,r3,r7
    26f4:	14802015 	stw	r18,128(r2)
    26f8:	14c00015 	stw	r19,0(r2)
    26fc:	00800084 	movi	r2,2
    2700:	30c04015 	stw	r3,256(r6)
    2704:	88bfe31e 	bne	r17,r2,2694 <__register_exitproc+0x50>
    2708:	30804117 	ldw	r2,260(r6)
    270c:	11c4b03a 	or	r2,r2,r7
    2710:	30804115 	stw	r2,260(r6)
    2714:	003fdf06 	br	2694 <__register_exitproc+0x50>
    2718:	00800034 	movhi	r2,0
    271c:	108d5e04 	addi	r2,r2,13688
    2720:	100b883a 	mov	r5,r2
    2724:	80805215 	stw	r2,328(r16)
    2728:	003fd606 	br	2684 <__register_exitproc+0x40>
    272c:	00800034 	movhi	r2,0
    2730:	10800004 	addi	r2,r2,0
    2734:	1000021e 	bne	r2,zero,2740 <__register_exitproc+0xfc>
    2738:	013fffc4 	movi	r4,-1
    273c:	003fdc06 	br	26b0 <__register_exitproc+0x6c>
    2740:	01006404 	movi	r4,400
    2744:	103ee83a 	callr	r2
    2748:	1007883a 	mov	r3,r2
    274c:	103ffa26 	beq	r2,zero,2738 <__register_exitproc+0xf4>
    2750:	80805217 	ldw	r2,328(r16)
    2754:	180b883a 	mov	r5,r3
    2758:	18000115 	stw	zero,4(r3)
    275c:	18800015 	stw	r2,0(r3)
    2760:	80c05215 	stw	r3,328(r16)
    2764:	18006215 	stw	zero,392(r3)
    2768:	18006315 	stw	zero,396(r3)
    276c:	0009883a 	mov	r4,zero
    2770:	883fc826 	beq	r17,zero,2694 <__register_exitproc+0x50>
    2774:	003fd706 	br	26d4 <__register_exitproc+0x90>

00002778 <register_fini>:
    2778:	f800283a 	ret

0000277c <__call_exitprocs>:
    277c:	00800034 	movhi	r2,0
    2780:	108be704 	addi	r2,r2,12188
    2784:	10800017 	ldw	r2,0(r2)
    2788:	defff304 	addi	sp,sp,-52
    278c:	df000b15 	stw	fp,44(sp)
    2790:	d8800115 	stw	r2,4(sp)
    2794:	00800034 	movhi	r2,0
    2798:	10800004 	addi	r2,r2,0
    279c:	1005003a 	cmpeq	r2,r2,zero
    27a0:	d8800215 	stw	r2,8(sp)
    27a4:	d8800117 	ldw	r2,4(sp)
    27a8:	dd400815 	stw	r21,32(sp)
    27ac:	dd000715 	stw	r20,28(sp)
    27b0:	10805204 	addi	r2,r2,328
    27b4:	dfc00c15 	stw	ra,48(sp)
    27b8:	ddc00a15 	stw	r23,40(sp)
    27bc:	dd800915 	stw	r22,36(sp)
    27c0:	dcc00615 	stw	r19,24(sp)
    27c4:	dc800515 	stw	r18,20(sp)
    27c8:	dc400415 	stw	r17,16(sp)
    27cc:	dc000315 	stw	r16,12(sp)
    27d0:	282b883a 	mov	r21,r5
    27d4:	2039883a 	mov	fp,r4
    27d8:	d8800015 	stw	r2,0(sp)
    27dc:	2829003a 	cmpeq	r20,r5,zero
    27e0:	d8800117 	ldw	r2,4(sp)
    27e4:	14405217 	ldw	r17,328(r2)
    27e8:	88001026 	beq	r17,zero,282c <__call_exitprocs+0xb0>
    27ec:	ddc00017 	ldw	r23,0(sp)
    27f0:	88800117 	ldw	r2,4(r17)
    27f4:	8c802204 	addi	r18,r17,136
    27f8:	143fffc4 	addi	r16,r2,-1
    27fc:	80000916 	blt	r16,zero,2824 <__call_exitprocs+0xa8>
    2800:	05bfffc4 	movi	r22,-1
    2804:	a000151e 	bne	r20,zero,285c <__call_exitprocs+0xe0>
    2808:	8409883a 	add	r4,r16,r16
    280c:	2105883a 	add	r2,r4,r4
    2810:	1485883a 	add	r2,r2,r18
    2814:	10c02017 	ldw	r3,128(r2)
    2818:	a8c01126 	beq	r21,r3,2860 <__call_exitprocs+0xe4>
    281c:	843fffc4 	addi	r16,r16,-1
    2820:	85bff81e 	bne	r16,r22,2804 <__call_exitprocs+0x88>
    2824:	d8800217 	ldw	r2,8(sp)
    2828:	10003126 	beq	r2,zero,28f0 <__call_exitprocs+0x174>
    282c:	dfc00c17 	ldw	ra,48(sp)
    2830:	df000b17 	ldw	fp,44(sp)
    2834:	ddc00a17 	ldw	r23,40(sp)
    2838:	dd800917 	ldw	r22,36(sp)
    283c:	dd400817 	ldw	r21,32(sp)
    2840:	dd000717 	ldw	r20,28(sp)
    2844:	dcc00617 	ldw	r19,24(sp)
    2848:	dc800517 	ldw	r18,20(sp)
    284c:	dc400417 	ldw	r17,16(sp)
    2850:	dc000317 	ldw	r16,12(sp)
    2854:	dec00d04 	addi	sp,sp,52
    2858:	f800283a 	ret
    285c:	8409883a 	add	r4,r16,r16
    2860:	88c00117 	ldw	r3,4(r17)
    2864:	2105883a 	add	r2,r4,r4
    2868:	1445883a 	add	r2,r2,r17
    286c:	18ffffc4 	addi	r3,r3,-1
    2870:	11800217 	ldw	r6,8(r2)
    2874:	1c001526 	beq	r3,r16,28cc <__call_exitprocs+0x150>
    2878:	10000215 	stw	zero,8(r2)
    287c:	303fe726 	beq	r6,zero,281c <__call_exitprocs+0xa0>
    2880:	00c00044 	movi	r3,1
    2884:	1c06983a 	sll	r3,r3,r16
    2888:	90804017 	ldw	r2,256(r18)
    288c:	8cc00117 	ldw	r19,4(r17)
    2890:	1884703a 	and	r2,r3,r2
    2894:	10001426 	beq	r2,zero,28e8 <__call_exitprocs+0x16c>
    2898:	90804117 	ldw	r2,260(r18)
    289c:	1884703a 	and	r2,r3,r2
    28a0:	10000c1e 	bne	r2,zero,28d4 <__call_exitprocs+0x158>
    28a4:	2105883a 	add	r2,r4,r4
    28a8:	1485883a 	add	r2,r2,r18
    28ac:	11400017 	ldw	r5,0(r2)
    28b0:	e009883a 	mov	r4,fp
    28b4:	303ee83a 	callr	r6
    28b8:	88800117 	ldw	r2,4(r17)
    28bc:	98bfc81e 	bne	r19,r2,27e0 <__call_exitprocs+0x64>
    28c0:	b8800017 	ldw	r2,0(r23)
    28c4:	147fd526 	beq	r2,r17,281c <__call_exitprocs+0xa0>
    28c8:	003fc506 	br	27e0 <__call_exitprocs+0x64>
    28cc:	8c000115 	stw	r16,4(r17)
    28d0:	003fea06 	br	287c <__call_exitprocs+0x100>
    28d4:	2105883a 	add	r2,r4,r4
    28d8:	1485883a 	add	r2,r2,r18
    28dc:	11000017 	ldw	r4,0(r2)
    28e0:	303ee83a 	callr	r6
    28e4:	003ff406 	br	28b8 <__call_exitprocs+0x13c>
    28e8:	303ee83a 	callr	r6
    28ec:	003ff206 	br	28b8 <__call_exitprocs+0x13c>
    28f0:	88800117 	ldw	r2,4(r17)
    28f4:	1000081e 	bne	r2,zero,2918 <__call_exitprocs+0x19c>
    28f8:	89000017 	ldw	r4,0(r17)
    28fc:	20000726 	beq	r4,zero,291c <__call_exitprocs+0x1a0>
    2900:	b9000015 	stw	r4,0(r23)
    2904:	8809883a 	mov	r4,r17
    2908:	00000000 	call	0 <__reset-0x2000>
    290c:	bc400017 	ldw	r17,0(r23)
    2910:	883fb71e 	bne	r17,zero,27f0 <__call_exitprocs+0x74>
    2914:	003fc506 	br	282c <__call_exitprocs+0xb0>
    2918:	89000017 	ldw	r4,0(r17)
    291c:	882f883a 	mov	r23,r17
    2920:	2023883a 	mov	r17,r4
    2924:	883fb21e 	bne	r17,zero,27f0 <__call_exitprocs+0x74>
    2928:	003fc006 	br	282c <__call_exitprocs+0xb0>

0000292c <__mulsi3>:
    292c:	20000a26 	beq	r4,zero,2958 <__mulsi3+0x2c>
    2930:	0007883a 	mov	r3,zero
    2934:	2080004c 	andi	r2,r4,1
    2938:	1005003a 	cmpeq	r2,r2,zero
    293c:	2008d07a 	srli	r4,r4,1
    2940:	1000011e 	bne	r2,zero,2948 <__mulsi3+0x1c>
    2944:	1947883a 	add	r3,r3,r5
    2948:	294b883a 	add	r5,r5,r5
    294c:	203ff91e 	bne	r4,zero,2934 <__mulsi3+0x8>
    2950:	1805883a 	mov	r2,r3
    2954:	f800283a 	ret
    2958:	0007883a 	mov	r3,zero
    295c:	1805883a 	mov	r2,r3
    2960:	f800283a 	ret

00002964 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    2964:	defffd04 	addi	sp,sp,-12
    2968:	df000215 	stw	fp,8(sp)
    296c:	df000204 	addi	fp,sp,8
    2970:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    2974:	e0bfff17 	ldw	r2,-4(fp)
    2978:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    297c:	e0bffe17 	ldw	r2,-8(fp)
    2980:	1005003a 	cmpeq	r2,r2,zero
    2984:	1000021e 	bne	r2,zero,2990 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    2988:	002af070 	cmpltui	zero,zero,43969
    298c:	00000106 	br	2994 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2990:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    2994:	e037883a 	mov	sp,fp
    2998:	df000017 	ldw	fp,0(sp)
    299c:	dec00104 	addi	sp,sp,4
    29a0:	f800283a 	ret

000029a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    29a4:	defffd04 	addi	sp,sp,-12
    29a8:	dfc00215 	stw	ra,8(sp)
    29ac:	df000115 	stw	fp,4(sp)
    29b0:	df000104 	addi	fp,sp,4
    29b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    29b8:	e13fff17 	ldw	r4,-4(fp)
    29bc:	00029640 	call	2964 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    29c0:	003fff06 	br	29c0 <_exit+0x1c>
    29c4:	00002778 	rdprs	zero,zero,157
